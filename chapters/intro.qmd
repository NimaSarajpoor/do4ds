# Introduction {.unnumbered}

Data science itself is pretty useless.

It's likely you became a data scientist because you love creating beautiful charts, minimizing model prediction error, or writing elegant code in R or Python.

Ultimately and perhaps frustratingly, these things don't matter. What matters is whether the output of your work is useful in affecting decisions at your organization or in the broader world.

In order to have those effects, you're going to have to share your work by putting it *in production*. For many of us, *in production* is some mythical state that involves super computers running ultra-complex machine learning models running over dozens of shards of data, terrabytes each.

It definitely occurs on a misty mountaintop, and does not involve the google sheets, csv files, or half-baked database queries in our work.

I'm here to tell you that you're wrong. If you're a data scientist and you're trying to put your work in front of someone else's eyes, you're *in production*. And if you're *in production*, this book is for you.

Maybe you're creating a one-off report that will get emailed around or hosting a live app that people visit once a week. Maybe you're re-running a report as new data comes in every week or serving live predictions to another service from a machine learning model.

Regardless of what *in production* looks like for you and your org, you want to make sure that the things you're doing are correct, dependable, reproducible, and performant (enough).

As you head into production you may find that you've spent your time thinking about data cleaning, building great dashboards and visualizations, and gradient boosted trees, but it's performance, database connections, and Docker that are keeping you awake at night. Or maybe they're not yet, because the challenge is ahead and you don't even know what you need to know.

If so, this book is for you.

The goal of this book is to acquaint you with the field of DevOps as it's relevant for data scientists. The hope is that by the time you finish this book, you'll have the language and technical understanding to apply DevOps practices and tooling to your own work, to help you interact with the IT/Admin professionals at your organization, and (if you must) DIY your own systems as needed.

## What is DevOps, anyway?

A quick google search will return innumerable pixels explaining DevOps. To be honest, a lot of those pixels are industry hype -- and I still find the concept slippery.

One of the reasons DevOps is slippery is because because it's not a specific set of technologies or tools or procedures -- it's a set of cultural norms, practices, and tools that interlock to shorten and de-risk the path from software development to deployment.

Historically, organizations had IT/Admins who were responsible for the servers, networking, and workstations that allowed those organizations to manage and use all their various computerized technologies. Then, the organization had a separate development department that was writing code. These people were developing applications for use inside the company - or if it was a software company -- to deliver to their customers.

When an application was complete (or perceived as such), it'd be hurled over the wall between Development and Operations and the Operations department would figure out how to put that application into production. They'd figure out the hardware and networking requirements, check that it was performant enough, and get it going in the real world. Needless to say, this pattern is very fragile and subject to many errors.

If you've ever shared an analysis or an app with a colleague and experienced the dreaded "well, it runs on my computer" phenomenon, you know some of the basic issues well.

DevOps arose as a discipline to lower the wall between Development and Operations and recognize that the practice of putting software into production is a shared responsibility between the app's developer(s) and the IT/Admin folks who manage the underlying infrastructure.

::: callout-note
## Terminology in this book

**DevOps** refers to the *knowledge, practices, and tools* that make it easier, safer, and faster to put work into production.

**IT/Admin** describes a set of *people and roles* who have the permission and responsibility for managing the servers and computers at your organization.
:::

The structure of IT/Admin teams varies a lot by organizations. Their names vary widely -- they might be named Information Technology (IT), SysAdmin, Site Reliability Engineering (SRE), or (yes) DevOps.[^intro-1]

[^intro-1]: I think a lot of DevOps experts would argue that you're doing DevOps wrong if you have a standalone DevOps team, but some companies have them.

In my experience, many different kinds of structures can work if you're trying to work with the IT/Admin folks at your organization to develop a data science DevOps practice.

However, there are three that raise red flags for me:

1.  IT/Admin functions that are split into separate atomic units like security, databases, networking, storage, procurement, cloud, and more. This is common at large organizations. This generally means that you've got lots of competent people around, but that figuring out who the right one is for any particular task, and getting all the right people in a room is going to be hard. Progress is likely to be slow.

2.  Outsourced IT/Admin functions. Fundamentally, an outsourced IT/Admin function means that your organization isn't interested in nurturing the Ops half of DevOps internally.

    There are also some concrete issues, like that outsourced IT/Admin teams are often in India, so it can be hard to find meeting times with American + European teams and that turnover tends to be higher in outsourced IT/Admin teams, so it can be hard for anyone to develop real expertise in the systems the Dev folks rely on daily.

3.  No IT/Admin function, or one that says that working with the data science team isn't their job. This isn't a tragedy, but it probably means you're about to become your own IT/Admin. Luckily, you've picked up this book, so you're in the right place.

Whether your organization has a IT/Admin setup that facilitates DevOps best practices or not, hopefully this book can help you take the first steps towards making your path to production smoother and simpler.

## What's in this book?

The term DevOps was coined in 2008, and the field is reasonably well-developed at this point. Software engineering and data science are related practices -- and there's a lot data scientists can learn from DevOps.

However, a simple 1-1 transposition of DevOps practices would be a mistake. Instead, this book aims to give you an introduction to the practices, norms, and tools -- derived from standard DevOps practices -- that will make the path to production easier for you as a data scientist.

As a data scientist, there are DevOps practices -- or their equivalents -- that you should adopt to make your transition to data science in production as smooth as possible. The first section of this book is about those things. The tools, norms, and practices that you can take from DevOps and apply to your own practices as a data scientist.

The book is split into three sections.

The first section focuses on best practices taken from DevOps practices you can employ to design your workflows, applications, and reports to make them safe and easy to put into production -- and update them once they're there.

The second section is designed for data scientists who have to interact with IT/Admins, we'll get into things that you probably shouldn't manage yourself, but where you'll have to interact with IT/Admins. Knowing enough about these topics to engage intelligently is important -- and this section will equip you with the knowledge you need to be successful working with your organization's IT/Admins.

In the final section, you'll learn about how to do this hands on. In some cases, you won't be able to avoid taking on some of the role of IT/Admin. You'll have to stand up and administer your own servers. These chapters will illuminate some tools and patterns that can make your life simpler on this front.
