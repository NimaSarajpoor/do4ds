# Introduction {.unnumbered}

As a standalone practice, data science is pretty useless. We all love creating beautiful charts, minimizing prediction error, and writing elegant code in R or Python. But ultimately, what matters in data science is whether you're able to affect decision-making at your organization.

That means that at some point, you're going to have to share your work, and at that point your work is *in production*. For many data scientists, *in production* is some mythical state that definitely doesn't involve google sheets, csv files, half-baked database queries. That conception is wrong.

If you're a data scientist and you're trying to put your work in front of someone else's eyes, you're in production.

Depending on your organization and situation, you might just be creating some reports from a static data file on your machine that you print or email around. But very often, the things you're doing are more complex than that and they have to be *deployed*. Perhaps you're hosting a live app that people visit on a daily basis. Or you're updating the data in a report every week. Or maybe you're serving predictions from your machine learning model to another system that consumes them.

In any case, you're now heading into *DevOps* territory. And while you've spent your time thinking about data cleaning, building great dashboards and visualizations, and (perhaps) gradient boosted trees, it's suddenly the cases that performance, database connections, and (perhaps) Docker are keeping you awake at night.

If so, this book is for you. This book is designed to equip you with the technical understanding to apply DevOps practices and tooling to your own work, to help you interact with the IT/Admin professionals at your organization, and (if you must) DIY a server of your own.

## What is DevOps anyway?

DevOps is an extremely slippery thing, despite the fact that innumerable pixels have already been spent on explaining and exploring DevOps. To be honest, a lot of those pixels are industry hype that obscure more than they clarify.

DevOps is a slippery concept, because it's not a specific set of technologies -- it's a set of norms, practices, and tools that help make the path from development to deployment easier. If you, like me, have a data science background, this can be a somewhat incomprehensible statement. What does it really mean?

Some organizations end up essentializing DevOps as IT/Admin, but make it Docker. It basically boils down to closing the gap between the development teams and the IT/Admin teams.

::: callout-note
## DevOps vs IT/Admin

***DevOps*** refers to the *knowledge, practices, and tools* that can help you put your work into production. It's what this book is about.

***IT/Admin*** describes a set of *people and roles* who have the permission and responsibility for managing the computers at your organization.

Depending on your organization, the people and team with IT/Admin team might have a different name like SysAdmin, Site Reliability Engineering (SRE), or (yes) DevOps.[^intro-1] In large organizations, IT/Admin functions may be split among many different standalone groups including security, databases, networking, storage, procurement, cloud, and more.

In small organizations, there may be no named IT/Admin group, which means it's you!

Either way, that's how I'll be using these terms throughout the book.
:::

[^intro-1]: I think a lot of DevOps experts would argue that you'r doing DevOps wrong if you have a standalone DevOps team.

Like agile, to which it's closely related, the context in which DevOps is being used matters a lot, so the details of what it means to apply a DevOps lens are variable. Here are a few examples of what it might meant to use DevOps outside a Data Science environment.[^intro-2] Part of the reason that DevOps is such a slippery concept is that deployment targets vary widely, and so getting concrete about DevOps is highly dependent on your context.

[^intro-2]: If you're interested in an extended DevOps example, [*The Phoenix Project*](https://itrevolution.com/the-phoenix-project/)is a book about DevOps that, as a friend once put it, reads like "a trashy romance novel for DevOps people". Strong recommend.

Here are a few examples of where DevOps might come into play:

-   You work for a hardware store chain and are responsible for developing the inventory software. This software has to know how many of any given part are on the shelf at any given time, help store managers know when to order more, and integrate with the online ordering system. While you write the software, you're not the one who supervises it when it's running -- that's the IT/Admin group. When you write a new module, the entire system has to go offline for a day to add your new code and test it in production. You might work with the IT/Admin team to be able to add a new module to the software without requiring any downtime.

-   Perhaps you work for a company that produces software data scientists use to write and deploy code in R and Python. You have to build and test your software on a wide variety of operating systems before releasing it. Historically, it has taken the entire team a week to run all these tests and you'd like to be able to lower the cost of each release so you can release more frequently. You might look to DevOps tooling and practices to try to reduce the burden of setting up environments with each target operating system, building the software, testing it, and making the new version live on the website.

These are strictly software engineering examples of applying DevOps, and don't have much to do with Data Science. So let's talk a little about how these lessons and tools can apply to you as a data scientist.

## DevOps for Data Science

As a data scientist, there are DevOps practices -- or their equivalents -- that you should adopt to make your transition to data science in production as smooth as possible. The first section of this book is about those things. The tools, norms, and practices that you can take from DevOps and apply to your own practices as a data scientist.

In the second section, we'll get into things that you probably shouldn't manage yourself, but where you'll have to interact with IT/Admins. Knowing enough about these topics to engage intelligently is important -- and this section will equip you with the knowledge you need to be successful working with your organization's IT/Admins.

In the final section, you'll learn about how to do this hands on. In some cases, you won't be able to avoid taking on some of the role of IT/Admin. You'll have to stand up and administer your own servers. These chapters will illuminate some tools and patterns that can make your life simpler on this front. And if you discover you actually like it, reach out, my team is usually hiring.
