---
editor_options: 
  markdown: 
    wrap: 72
---

# Lab 1: Get your own server {lab-1=""}

Throughout the rest of the book, we're going to talk about how to set up
a real data science workbench in the cloud. In this first lab, we're
just going to go through the simple steps of getting a free server from
AWS to use.

If you've never set up a server before, I'd strongly recommend you play
along.

Throughout the rest of the book, we're going to be taking this toy
server and upgrading it in various ways. If you're trying to work along,
you'll probably do this a dozen times or more over the course of the
book.

There are a number of topics that we're going to gloss over in this
chapter including networking and storage configuration, security, and
how SSH works. By the time you're done with this book, you'll be able to
come back to this chapter and fully understand everything you did.

You'll also understand why this first server is ready for production
data science work in the same way throwing a tarp over a tree branch in
the forest is a house. It might be a nice place to stay for a little,
but you're going to need something more robust longer-term.

For now, you can get a server of your own in 10-15 minutes if you just
follow along, which is what I recommend.

### Login to the AWS Console

We're going to be standing up a server on Amazon Web Services (AWS). If
you feel comfortable, feel free to do this in any cloud provider. All
cloud providers have their own equivalents of all the things we're about
to do in AWS.

We will be standing up a server in AWS's *free tier* -- so there will be
no cost involved as long as you haven't used up all your AWS free tier
credits before now.

We're going to start by logging into AWS. If you've done this before,
just go ahead and log in.

If not, go to <https://aws.amazon.com> and click
`Sign In to the Console` .

If you've never set up an AWS account before, click
`Create a New AWS account` and follow the instructions to create an
account. Note that even if you've got an Amazon account for ordering
stuff online and watching movies, an AWS account is separate.

Once you've logged in, you'll be confronted by the AWS console. There
are a ton of things here, and it's rather overwhelming. If you feel like
you have to understand what all these things are before going ahead,
feel free to check out the chapter on The Cloud.

### Stand up an instance

Click on the `EC2` service (it's under `Launch a virtual machine` or
`Compute` depending on where you landed). The table has all the
different quick start Amazon Machine Images (AMIs). Find and click
`Ubuntu Server 20.04 LTS` -- it'll be one of the first handful.

Now you'll be seeing the instance size chooser. It should have
auto-selected a server with the label `Free tier eligible`. Just stick
with this for now.

Scroll down and click `Review and Launch`, and `Launch` on the next
page.

When you click Launch, you'll be asked to use a key pair. Assuming you
don't have an existing keypair, select `Create a new key pair`, name it
`my_test_key`, and click `Download`.

Keep track of the `my_test_key.pem` file your computer downloads, you'll
need it again in a minute.

Click `Launch Instances`. AWS is now creating a virtual server *just for
you*. If you click `View Instances` in the lower right, you'll see your
instance. When the instance state switches to `Running`, it's up and
running!

Before we leave the AWS console, let's make sure that we'll be able to
get to it from the internet.

Scroll down to the Security tab. Click the blue link under
`Security Groups`, which will start with `sg-` and include
`launch-wizard-` in parentheses.

Click `Edit inbound rules` , then `Add rule`. Under `Type`, scroll down
and select `HTTP`, and under `Source Type`, select `Anywhere-IPv4`.
Scroll down and click `Save rules`.

### SSH into the server

The `.pem` key you downloaded is the skeleton key to your server. If you
were setting up a real server, you'd need to be extremely careful with
this key, as it allows unrestricted access to the server. For the same
reason, it's also great for quickly monkeying around with a server.

Before we can use it to open the server, we'll need to make a quick
change to the permissions on the key.

To take the next steps, you'll need to at least be able to open your
computer's terminal and copy/paste some commands below. If that's new to
you, feel free to check out the [chapter on using the command
line](#command-line).

If you're on a Mac or Linux system, you'll do the following:

```bash
$ cd ~/Downloads #or whatever directory the key is in
$ chmod 600 my_test_key.pem
```

#TODO: Windows?

To access your server, click on the `Instance ID` link for your server,
and copy the `Public IPv4 DNS`, which will start with `ec2-` and end
with `amazonaws.com`.

In your terminal type the following

```bash
$ ssh -i my_test_key.pem ubuntu@<Public IPv4 DNS you copied>
```

Type `yes` when prompted, and you're now logged in to your server!

### Stand Up Nginx

Before we log off and kill this server, let's stand up
Nginx.[^aws-walkthrough-1] Nginx is open source software that can be
used to serve websites, as well as a variety of other networking tasks.
You'll see it again before you're through this book.

[^aws-walkthrough-1]: I pronounce this word "engine-ex", but there are
    numerous options for pronunciation. Pick your favorite.

Let's get it installed with the commands below.

```bash
$ sudo apt update
$ sudo apt-get install nginx -y
```

Go back into the AWS console to the instance page and copy the
`Public IPv4 DNS`. Paste this into your browser's navigation bar, and
add `http://` right before. When you navigate to the page, you'll see
the default Nginx home page.

Let's make a quick change to the page, just for fun.

Back in your terminal that's still `SSH`-ed into the instance, navigate
to where that page is located:

```bash
$ cd /var/www/html
```

You can edit the page by typing

```bash
$ sudo vi index.nginx-debian.html
```

If you don't recall how to use `vi`, check out the [command line]()
tutorial, but for now, you can enter edit mode by pressing `i`,
navigating around with the arrow keys, and typing.

Edit something -- say change this line

    <h1>Welcome to nginx!</h1 >

to something a little more personalized.

When you're done, hit `esc` followed by `:wq`.

Now, when you re-load the page in your browser, you should be able to
see your changes reflected there.

#TODO: consider using a container to get shiny server up quickly.

### Burn it all down

One of the best things about cloud infrastructure is that it can go away
as easily as it came up. We made a number of choices here that are fine
for ephemeral infrastructure for playing around. But this server should
not be used for anything real.

When you've had your fill of playing, let's take the server down.

Go back to the EC2 page for your server. Under the `Instance State` drop
down in the upper right, choose `Terminate Instance`. If you go to the
`Instances` page, it'll take just a minute for the instance to go away.

## Exercises

Try standing up a new server and installing R and RStudio Server Open
Source, or Python and JupyterHub.

-   Hint 1: Remember that your instance only allows traffic to SSH in on
    port `22` by default. You access RStudio on port `8787` by default
    and JupyterHub on port `8000`. You control what ports are open via
    the Security Group.

-   Hint 2: You'll need to create a user on the server. The `adduser`
    command is your friend.

#TODO: test out JupyterHub
