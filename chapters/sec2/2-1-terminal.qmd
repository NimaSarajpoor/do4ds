# The Terminal {#sec-terminal}

The biggest difference between working on your desktop and working on a
server is that servers generally do not have graphical user interfaces
(GUIs).

If you want to adjust the system settings on your laptop or navigate
from directory to directory, you can click through a file tree or open
up your preferences pane. On a server, interaction is via the command
line -- an all-text interface where you type commands.

Once nice thing is that once you feel comfortable using the command line
on a server, you'll probably find that there are many things that will
get easier for you locally as well! Plus you get to feel like a real
hacker.

In this chapter we'll walk through getting access to the command line on
your computer, using it to connect to your remote server, and how to do
basic interactions with a Linux system from the command line.

I'd recommend reading this chapter even if you've used SSH or the
command line before. It's probable you didn't really understand *why*
you took the steps you did. Hopefully, by the time you've finished this
chapter you might have to google the exact commands, but you'll never
again confuse a public and a private key and what to do with each (we've
all been there).

## Setting up the command line

Before you start interacting with the command line on your machine, it's
helpful to have a mental model of what you're interacting with.

There are three layers to interacting with the command line -- the
terminal, the shell, and the operating system commands.

The *terminal* is the visual program where you'll type in commands.
Depending on which terminal you're using, the colors and themes
available for the window, as will the options for having multiple tabs
and panes, and the keyboard shortcuts you'll use to manage them.

It is possible to spend A LOT of time customizing your terminal to be
exactly what you like. Some might argue it is not be the best use of
your time. Such people are no fun, and and having a terminal that's
super customized to what you like is great.

The *shell* is the program you're interacting with as you're typing in
commands. It's what matches the words you type to actual commands or
programs on your system. Depending on which shell you choose, you'll get
different options for autocompletion, handy plugins, and coloring and
theming of the actual text in your terminal.

There is some overlap of things you can customize via the terminal vs
the shell, so mix and match to your heart's content.

Lastly, the *operating system* is what actually runs the commands you're
typing in. So the set of commands available to you will differ by
whether you're using Windows or Mac or Linux.

```{mermaid}
graph LR
    A[A Human] --> |Types| B[Commands]
    A --> |Opens| E
    E[Terminal] --> |Opens| C
    C[Shell] --> |Dispatches| B
    D[Operating System] --> |Defines the set of| B
    D[Operating System] --> |Runs| B
```

In the next few sections of this chapter, we'll get into how to set up
your terminal and shell so that it looks and behaves exactly the way you
want.

::: callout-note
I haven't used a Windows machine in many years. I've collected some
recommendations here, but I can't personally vouch for them the way I
can my Mac recommendations.
:::

### Choosing your terminal

The terminal is the graphical program you'll interact with to open
terminal windows, have tabs, and do some theming of the window itself.

If you're using a Mac, you've got a built-in terminal app, conveniently
called `Terminal`. It's fine.

If you're going to be using your terminal more than occasionally, I'd
recommend downloading and switching to the the free
\[iTerm2\](https://iterm2.com/), which adds a bunch of niceties like
better theming and multiple tabs.

If you're using Windows, there are a variety of alternative terminals
you can try, but the built-in terminal is the favorite of many users.
Experiment if you like, but feel free to stick with the default.

### Choosing and configuring your shell

The default shell for MacOS (and Linux) is called bash. It's a great
shell, and it hasn't been replaced in a very long time. Many people --
including me -- prefer to use other shells that build on top of bash,
adding nicer theming and convenience features.

If you don't already have a favorite bash alternative, I recommend zsh.
It has a few advantages over bash out of the box, like better
autocompletion. It also has a huge ecosystem of themes and plugins that
can make your shell way prettier and more functional. There are plugins
that do everything from displaying your git status on the command line
to controlling your Spotify playlist.

Other popular alternative shells include Ksh and Fish.

The main reason to use zsh is the plugin ecosystem -- so you're going to
want a plugin manager. The two most popular options are OhMyZsh and
Prezto. I prefer and recommend prezto, but the choice is really up to
you.

I'm not going to go through the steps of installing these tools -- there
are numerous online walkthroughs and guides that you can google.

But it is a little confusing to know what to customize where, so here's
the high level overview if you've installed iTerm2, zsh, and prezto.
You'll customize the look of the window and the tab behavior in the
iTerm2 preferences and customize the text theme and plugins via prezto.

Since you're configuring your plugins via prezto using files like the
`.preztorc`, you shouldn't need to customize zsh much directly.

Windows comes with two shells built in, the Command shell (`cmd`) and
the PowerShell. The command shell is older and has been superseded by
PowerShell. If you're just getting started, you absolutely should just
work with PowerShell. If you've been using Command shell on a Windows
machine for a long time, most Command shell command work in PowerShell,
so it may be worth switching over.

Once you've installed PowerShell, many people like customizing it with
Oh My Posh.

## Comprehension Questions

1.  Draw a mental map that includes the following: terminal, shell,
    operating system, my laptop
