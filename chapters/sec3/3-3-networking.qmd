# Intro to Network Transit {#sec-networks-1}

These days using a computer is basically synonymous with using a
computer network. When you visit a website, print a document, or login
to your email, you are making use of a computer network.

This chapter is an introduction to how computer networks work. This
chapter is heavy on introducing mental models for how network traffic
works. There is no lab in this chapter.

The computer network we're most familiar with is the biggest of them
all: The Internet. But there are myriad other networks, like the very
small private network of the devices (phones, computers, TVs, etc)
connected to your home wifi router, to the somewhat larger VPN (which
stands for virtual private network) you might connect to for school or
work.

The good news is that computer networks are basically all the same. If
you understand one, you understand them all. Each step in the process is
governed by a *protocol* that defines what is valid.

There are two basic levels of protocols that are helpful to understand
-- the transport + address layer, and the application layer.

Just as you and your friend could communicate in any number of human
languages, computers define what a valid message is with an *application
layer protocol*. The most common application layer protocol, used for
all standard web traffic, is **h**yper**t**ext **t**ransfer **p**rotocol
(*http*). [Chapter @sec-http] is all about application layer protocols,
and `http` in particular.

For the purposes of this chapter, we're going to completely set aside
physical network infrastructure. Yes, there are wires, cables,
satellites, routers, server farms, and more that allow computer
networking to work. For the purposes of this chapter, we're going to
focus entirely on the software side of networking.

One cool thing about the cloud is that it allows you to abstract away
all of the physical hardware and focus completely on how the software
interacts.

## TCP/IP and the mail

Let's start by imagining you have a penpal, who lives in an apartment
building across the country.[^3-3-networking-1]

[^3-3-networking-1]: For this analogy to work, everyone lives in
    apartment buildings rather than standalone houses.

Let's say you've got some juicy gossip to share with your penpal.
Because this gossip is so juicy, you're not going to put it on a
postcard. You'd write your letter, put it inside an envelope, address
the letter to the right spot, and put it in the mail.

You trust the postal service to take your letter, deliver it to the
correct address, and then your friend will be able to read your letter.

The process of actualy getting data from one computer to another is
governed by the *TCP/IP* protocol and is called *packet
switching*.[^3-3-networking-2]

[^3-3-networking-2]: TCP and IP are actually two separate protocols at
    different layers of the protocol stack. But they're so closely
    linked that we can talk about them as one.

When a computer has data to send to another computer, it takes that
information and packages it up into a bundle called a
*packet*.[^3-3-networking-3]

[^3-3-networking-3]: One of the biggest ways the mail *is not* like
    packet switching is that your message gets chopped up among lots of
    different packets, which are routed independently, and are
    reassembled when they get where they're going. Works well for
    computers, not so well for real-world mail. It's also pretty much an
    irrelevant detail, since this whole process works quite invisibly.

The data in the packet is like the contents of your letter.

Just as the postal service defines permissible envelope sizes and
address formats, the *TCP/IP* protocol defines what a packet has to look
like from the outside, including what constitutes a valid address.

A uniform resource locator (URL) is the way to address a specific
resource on a network.

A full URL includes 4 pieces of information: $$
\overbrace{\text{https://}}^\text{protocol}\overbrace{\text{example.com}}^\text{address}\overbrace{\text{:443}}^\text{port}\overbrace{\text{/}}^\text{resource}
$$

The protocol starts the URL. It is separated from the rest of the URL by
`://`.

Each of the rest of the pieces of the URL is needed to get to a specific
resource and has a real-world analog.

The address is like the street address of your penpal's building. It
specifies the host where your data should go.[^3-3-networking-4]

[^3-3-networking-4]: Often it's not a single server at the address --
    but it behaves like one. It could instead be a proxy in front of a
    cluster of servers or even more complicated routing. All that
    matters is that it behaves like a single server from the outside.

A host is any entity on a network that can receive requests and send
responses. So a server is a common type of host on a network, but so is
a router, your laptop, and a printer.

The port is like your friend's apartment. It specifies which service on
the server to address.

Lastly, the resource dictates what resource you want on the server. It's
like the name on the address of the letter, indicating that you're
writing to your penpal, not their mom or sister.

This full URL may look a little strange to you. You're probably used to
just putting a standalone domain like $google.com$ into your browser
when you want to go to a website. That's because `https`, port `443`,
and `/` are all defaults, so modern browsers don't make you specify
them.

But what if you make it explicit? Try going to
`https://google.com:443/`. What do you get?

## IP Addresses identify where the mail is going

The proper address of a server on a network is defined by the *Internet
Protocol* (IP) and is called an *IP Address*. IP addresses are mapped to
human-friendly domains like $google.com$ with the *Domain Name Service
(DNS)*.

::: callout-note
In this chapter, we're going to set DNS aside and talk exclusively about
IP Addresses. [Chapter @sec-dns] is all about DNS.
:::

There are both public and private versions of IP addresses. Private IP
addresses are valid only within a private network. Every device attached
to a network has a private IP address. Public IP addresses are valid
across the entire internet and if you've got one, anyone on the internet
can try to reach you there.

There are a few reasons for this private/public split. The first is
security. If you've got a public IP address, anyone on the internet can
come knock on your virtual front door. You probably don't want this to
be the case for your phone or your laptop, so they only have private IP
addresses.

The second reason is that in order for IP addresses to work, they have
to be unique. If you needed a public IP address to just connect to the
internet, you'd either need one permanently reserved for your laptop, or
it would need a new one every time. Instead, because your home WiFi
router is the only thing that needs to know about your laptop, it
drastically lowers the amount of coordination needed.

There are two main flavors of IP addresses.

Most IP addresses you've probably seen before are IPv4 addresses.
They're four blocks of 8-bit fields (numbers between `0` and `255`) with
dots in between, so they look something like `65.77.154.233`.

If you do the math, you'll realize there are "only" about 4 billion of
these. While we can stretch those 4 billion IP addresses to many more
devices since most devices only have private IPs, we are indeed running
out of public IPv4 addresses.

The good news is that smart people started planning for this a while
ago. In the last few years, adoption of the new standard, IPv6, has
started. IPv6 addresses are eight blocks of hexadecimal (`0-9` + `a-f`)
digits separated by colons, with certain rules that allow them to be
shortened, so `4b01:0db8:85a3:0000:0000:8a2e:0370:7334` or `3da4:66a::1`
are both examples of valid IPv6 addresses.

IPv6 will coexist with IPv4 for a few decades, and we'll eventually
switch entirely to IPv6. There's no worry about running out of IPv6
addresses any time soon, because the total quantity of IPv6 addresses is
a number with 39 zeroes.

Most IP addresses are freely available to be assigned, but there are a
few that you'll see in particular contexts and it's useful to know what
they are.

The first IP address you'll see a lot is `127.0.0.1`, also known as
`localhost` or loopback. This is the way a machine refers to itself. For
example, if you open a Shiny app in RStudio Desktop, the app will pop up
in a little window along with a notice that says

`Listening on http://127.0.0.1:6311`

That `http://127.0.0.1` is indicating that your computer is serving the
Shiny app to itself on the localhost address.

There are also a few blocks of addresses that are reserved for use on
private networks, so they're never assigned in public.

You don't really need to remember these, but it's very likely you've
seen an address like `192.168.0.1` or `192.168.1.1` if you've ever tried
to configure a router or modem for your home wifi.

Now you know why.

### Reserved IP Address Cheatsheet

+----------------+----------------------------------------------------+
| Code           | Meaning                                            |
+================+====================================================+
| 127.0.0.1      | `localhost` or loopback -- the machine that        |
|                | originated the request                             |
+----------------+----------------------------------------------------+
| 1 92.168.x.x   | Protected address blocks used for private IP       |
|                | addresses. More on public vs private addresses in  |
| 17 2.16.x.x.x  | chapter XX.                                        |
|                |                                                    |
| 10.x.x.x       |                                                    |
+----------------+----------------------------------------------------+

## Ports get you to the right service

Each server may be running many services -- for example, in the lab in
[Chapter @sec-linux-admin], we set up three different services --
RStudio, JupyterHub, and a plumber API -- on one server. The way to
distinguish which one I mean is via a 1-1 mapping services to numeric
ports.

A port is identified by a number from 1 to just over 65,000. When URLs
include ports, they appear after the address and a colon, `:`.

Since each service running on a server needs a unique port, it's common
to choose a somewhat random relatively high-numbered port. That makes
sure it's unlikely that the port will conflict with another service
running on the server.

For example RStudio Server runs on port 8787 by default. According to JJ
Allaire, there's no special meaning to this port. It was chosen because
it was easy to remember and not 8888, which some other popular projects
had taken.

By default, the overwhelming majority of the ports on the server are
closed for security reasons. When you start a running service on a
server, you also open the correct port for that service.

### Special Port Cheatsheet

All ports below 1024 are reserved for common server tasks, so you can't
assign services to low-numbered ports.

There are also three common ports that will come up over and over. These
are handy because if you're using the relevant service, you don't have
to indicate if it's using the default port.

| Protocol | Default Port |
|----------|--------------|
| HTTP     | 80           |
| HTTPS    | 443          |
| SSH      | 22           |

## How packets are routed

Just as a letter gets routed from your local processing facility to
centralized ones and then back to regional and local facilities before
going into a carrier's mailbag, packets travel up to centralized
facilities for routing network traffic, and then back down to more local
ones. The pieces of hardware or software doing this traffic directing
are called *routers.*

It's not essential to understand routing for our purposes, but a general
sense of how it works can be helpful.

Routers are hardware or software that keep track of the list of IP
addresses it knows about -- either sub-networks or physical devices.
When a packet comes in, the router checks if it's intended destination
is on that list. If not, it just sends the packet to an upstream
*default address* of a more general router.[^3-3-networking-5]

[^3-3-networking-5]: There are actually a few different types of
    addresses used to do this. IP addresses are used for identifying
    network resources and the MAC address used for physical hardware.
    Your router is also responsible for assigning IP addresses to
    devices as they join the network via the dynamic host configuration
    protocol (DHCP). I'm glossing over all these details as they're
    immaterial to the understanding important for this chapter.

If you're thinking about the WiFi router in your house, the default
address is probably one owned by your internet service provider (ISP)
for your neighborhood. And that router's default address is probably
also owned by your ISP, but for a broader network.

So your packet will get passed upstream to a sufficiently general
network and then back downstream to the actual address you're trying to
reach.

Meanwhile, your computer is waiting for a response from the server. Once
the server has a response to send, it comes back using the same
technique. Obviously a huge difference between sending a letter to a
penpal and using a computer network is the speed. Where sending a
physical letter takes a minimum of days, sending and receiving packets
over a network is so fast that the delay is imperceptible when you're
playing a multiplayer video game or collaborating on a document online.

## Firewalls, allow-lists, and other security settings

One of the most basic ways to keep a server safe is to not allow traffic
from the outside to come in. Generally that means that in addition to
keeping the server ports themselves closed, you'll also have a firewall
up that defaults to all ports being closed.

In AWS, the basic level of protection for your server is called the
security group. If you remember, we used a default security group in
launching your server. When you want to go add more services to your
server, you'll have to open additional ports both on the server and in
the security group.

In addition to keeping particular ports closed, you can also set your
server to only allow incoming traffic from certain IP addresses. This is
generally a very coarse way to do security, and rather fragile. For
example, you could configure your server to only accept incoming
requests from your office's IP address, but what if someone needs to
access the server from home or the office's IP address is reassigned?

One thing that is *not* a security setting is just using a port that's
hard to guess. For example, you might think, "Well, if I were to put SSH
on port 2943 instead of 22, that would be safer because it's harder to
guess!" I guess so, but it's really just an illusion of security. There
are ways to make your server safer. Choosing esoteric port numbers
really isn't it.

## Comprehension Questions

1.  Write down the step-by-step procedure that is followed when you sit
    down at your laptop and type google.com into the search bar. Your
    explanation should include the following terms: URL, domain, DNS,
    protocol, HTTP, HTTPS, Default Address, Router
2.  Create a mind map of the following terms: Application Layer
    Protocol, HTTP, HTTPS, SSH, Port, 22, 80, 443
3.  In the following URLs, what are the domain, top-level domain, path,
    subdomain, query parameters?
    1.  https://blog.example.com/2022-10-30

    2.  facebook.com?search=alex.gold

    3.  https://alexkgold.space/mfy.html
4.  Write a mind map of the following terms: HTTP, HTTPS, SSL, TLS, CA,
    Public Certificate, Private Certificate, 443
