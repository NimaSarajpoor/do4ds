# Cheatsheets {#sec-append-cheat}

## Environments as Code

### Checking library + repository status

| Step                                         | R Command        | Python Command |
|----------------------------------------------|------------------|----------------|
| Check whether library in sync with lockfile. | `renv::status()` | None           |

### Creating and Using a Standalone Project Library

Make sure you're in a standalone project library.

+-------------------------+-------------------+-----------------------+
| **Step**                | R Command         | Python Command        |
+-------------------------+-------------------+-----------------------+
| Create a standalone     | `renv::init()`    | `                     |
| library.                |                   | python -m venv <dir>` |
|                         |                   |                       |
| Tip: Make sure you've   |                   | Convention:           |
| got `{renv}`/`{venv}`:  |                   | use`.venv` for        |
| `in                     |                   | `<dir>`               |
| stall.packages("renv")` |                   |                       |
| `{venv}` included w/    |                   |                       |
| Python 3.5+             |                   |                       |
+-------------------------+-------------------+-----------------------+
| Activate project        | `                 | `source               |
| library.                | renv::activate()` |  <dir> /bin/activate` |
|                         |                   |                       |
|                         | Happens           |                       |
|                         | automatically if  |                       |
|                         | in RStudio        |                       |
|                         | project.          |                       |
+-------------------------+-------------------+-----------------------+
| Install packages as     | `install.p        | `python               |
| normal.                 | ackages("<pkg>")` | -m pip install <pkg>` |
+-------------------------+-------------------+-----------------------+
| Snapshot package state. | `                 | `pip freez            |
|                         | renv::snapshot()` | e > requirements.txt` |
+-------------------------+-------------------+-----------------------+
| Exit project            | Leave R project   | `deactivate`          |
| environment.            | or                |                       |
|                         | `re               |                       |
|                         | nv::deactivate()` |                       |
+-------------------------+-------------------+-----------------------+

### Collaborating on someone else's project

Start by downloading the project into a directory on your machine.

+-----------------+-----------------+--------------------------------+
| **Step**        | **R Command**   | **Python Command**             |
+-----------------+-----------------+--------------------------------+
| Move into       | `set wd ("<     | `cd <project-dir>`             |
| project         | project-dir>")` |                                |
| directory.      |                 |                                |
|                 | Or open project |                                |
|                 | in RStudio.     |                                |
+-----------------+-----------------+--------------------------------+
| Create project  | `renv::init()`  | `python -m venv <dir>`         |
| environment.    |                 |                                |
|                 |                 | Recommend: use `.venv` for     |
|                 |                 | `<dir>`                        |
+-----------------+-----------------+--------------------------------+
| Enter project   | Happens         | `source <dir> /bin/activate`   |
| environment.    | automatically   |                                |
|                 | or              |                                |
|                 | `re             |                                |
|                 | nv::activate()` |                                |
+-----------------+-----------------+--------------------------------+
| Restore         | Happens         | `pi                            |
| packages.       | automatically   | p install -r requirements.txt` |
|                 | or              |                                |
|                 | `r              |                                |
|                 | env::restore()` |                                |
+-----------------+-----------------+--------------------------------+

## HTTP Code Cheatsheet {#cheat-http}

As you work more with HTTP traffic, you'll learn some of the common
codes. Here's a cheatsheet for some of the most frequent you'll see.

+-------------------+-----------------------------------------------+
| Code              | Meaning                                       |
+===================+===============================================+
| `200`             | Everyone's favorite, a successful response.   |
+-------------------+-----------------------------------------------+
| `3xx`             | Your query was redirected somewhere else,     |
|                   | usually ok.                                   |
+-------------------+-----------------------------------------------+
| `4xx`             | Errors with the request                       |
+-------------------+-----------------------------------------------+
| `400`             | Bad request. This isn't a request the server  |
|                   | can understand.                               |
+-------------------+-----------------------------------------------+
| `401` and `403`   | Unauthorized or forbidden. Required           |
|                   | authentication hasn't been provided.          |
+-------------------+-----------------------------------------------+
| `404`             | Not found. There isn't any content to access  |
|                   | here.                                         |
+-------------------+-----------------------------------------------+
| `5xx`             | Errors with the server once your request got  |
|                   | there.                                        |
+-------------------+-----------------------------------------------+
| `500`             | Generic server-side error. Your request was   |
|                   | received, but there was an error processing   |
|                   | it.                                           |
+-------------------+-----------------------------------------------+
| `504`             | Gateway timeout. This means that a proxy or   |
|                   | gateway between you and the server you're     |
|                   | trying to access timed out before it got a    |
|                   | response from the server.                     |
+-------------------+-----------------------------------------------+

## Cheatsheet: Git {#cheat-git}

+----------------------+---------------------------------------+
| **Command**          | **What it does**                      |
+----------------------+---------------------------------------+
| `git clone <remote>` | Clone a remote repo -- make sure      |
|                      | you're using SSH URL.                 |
+----------------------+---------------------------------------+
| `                    | Add files/dir to staging area.        |
| git add <files/dir>` |                                       |
+----------------------+---------------------------------------+
| `git                 | Commit staging area.                  |
| commit -m <message>` |                                       |
+----------------------+---------------------------------------+
| `git p               | Push to a remote.                     |
| ush origin <branch>` |                                       |
+----------------------+---------------------------------------+
| `git p               | Pull from a remote.                   |
| ull origin <branch>` |                                       |
+----------------------+---------------------------------------+
| `git che             | Checkout a branch.                    |
| ckout <branch name>` |                                       |
+----------------------+---------------------------------------+
| `git checko          | Create and checkout a branch.         |
| ut -b <branch name>` |                                       |
+----------------------+---------------------------------------+
| `git bran            | Delete a branch.                      |
| ch -d <branch name>` |                                       |
+----------------------+---------------------------------------+

## Docker {#cheat-docker}

### Docker CLI Commands

+----+-------------------+-------------------+-------------------------+
| S  | Command           | **What it does**  | **Notes and helpful     |
| ta |                   |                   | options**               |
| ge |                   |                   |                         |
+----+-------------------+-------------------+-------------------------+
| B  | `docker b         | Builds a          | `-t <name:tag>`         |
| ui | uild <directory>` | directory into an | provides a name to the  |
| ld |                   | image.            | container.              |
|    |                   |                   |                         |
|    |                   |                   | `tag` is optional,      |
|    |                   |                   | defaults to `latest`.   |
+----+-------------------+-------------------+-------------------------+
| Mo | `doc              | Push a container  |                         |
| ve | ker push <image>` | to a registry.    |                         |
+----+-------------------+-------------------+-------------------------+
| Mo | `doc              | Pull a container  | Rarely needed because   |
| ve | ker pull <image>` | from a registry.  | `run` pulls the         |
|    |                   |                   | container if needed.    |
+----+-------------------+-------------------+-------------------------+
| R  | `do               | Run a container.  | See flags in next       |
| un | cker run <image>` |                   | table.                  |
+----+-------------------+-------------------+-------------------------+
| R  | `docker           | Stop a running    | `docker kill` can be    |
| un | stop <container>` | container.        | used if `stop` fails.   |
+----+-------------------+-------------------+-------------------------+
| R  | `docker ps`       | List running      | Useful to get container |
| un |                   | containers.       | `id` to do things to    |
|    |                   |                   | it.                     |
+----+-------------------+-------------------+-------------------------+
| R  | `                 | Run a command     | Basically always used   |
| un | docker exec <cont | inside a running  | to open a shell with    |
|    | ainer> <command>` | container.        | `docker exec -it        |
|    |                   |                   |  <container> /bin/bash` |
+----+-------------------+-------------------+-------------------------+
| R  | `docker           | Views logs for a  |                         |
| un | logs <container>` | container.        |                         |
+----+-------------------+-------------------+-------------------------+

### Flags for `docker run`

+-------------+-------------+------------------------+
| Flag        | Effect      | Notes                  |
+-------------+-------------+------------------------+
|             | Give a name | Optional.              |
| `--n        | to          | Auto-assigned if not   |
| ame <name>` | container.  | provided               |
+-------------+-------------+------------------------+
| `--rm`      | Remove      | Don't use in           |
|             | container   | production. You        |
|             | when its    | probably want to       |
|             | stopped.    | inspect failed         |
|             |             | containers.            |
+-------------+-------------+------------------------+
| `-d`        | Detach      | Almost always used in  |
|             | container   | production.            |
|             | (don't      |                        |
|             | block the   |                        |
|             | terminal).  |                        |
+-------------+-------------+------------------------+
| `-p <po     | Publish     | Needed if you want to  |
| rt>:<port>` | port from   | access an app or API   |
|             | inside      | inside the container.  |
|             | running     |                        |
|             | inside      |                        |
|             | container   |                        |
|             | to outside. |                        |
+-------------+-------------+------------------------+
| `-v<        | Mount       |                        |
| dir>:<dir>` | volume into |                        |
|             | the         |                        |
|             | container.  |                        |
+-------------+-------------+------------------------+

*Reminder: Order for `-p` and `-v` is `<host>:<container>`*

### Dockerfile Commands

These are the commands that go in a Dockerfile when you're building it.

+---------------+------------------------+----------------------------+
| Command       | Purpose                | Example                    |
+---------------+------------------------+----------------------------+
| `FROM`        | Indicate base          | `FROM rocker/r-ver:4.1.0`  |
|               | container.             |                            |
+---------------+------------------------+----------------------------+
| `RUN`         | Run a command when     | `RUN apt-get update`       |
|               | building.              |                            |
+---------------+------------------------+----------------------------+
| `COPY`        | Copy from build        | `COPY . /app/`             |
|               | directory into the     |                            |
|               | container.             |                            |
+---------------+------------------------+----------------------------+
| `CMD`         | Specify the command to | `CMD quarto render .`      |
|               | run when the container |                            |
|               | starts.                |                            |
+---------------+------------------------+----------------------------+

## Cloud Services

+---------------+---------------+------------+------------+
| **Service**   | **AWS**       | **Azure**  | **GCP**    |
+---------------+---------------+------------+------------+
| Kubernetes    | EKS or        | AKS        | GKE        |
| cluster       | Fargate       |            |            |
+---------------+---------------+------------+------------+
| Run a         | ECS or        | Azure      | Google App |
| container or  | Elastic       | Container  | Engine     |
| application   | Beanstalk     | Apps       |            |
+---------------+---------------+------------+------------+
| Run an API    | Lambda        | Azure      | Google     |
|               |               | Functions  | Cloud      |
|               |               |            | Functions  |
+---------------+---------------+------------+------------+
| Database      | RDS           | Azure SQL  | Google     |
|               |               |            | Cloud      |
|               |               |            | Database   |
+---------------+---------------+------------+------------+
| Data          | Redshift      | DataLake   | BigQuery   |
| Warehouse     |               |            |            |
+---------------+---------------+------------+------------+
| ML Platform   | SageMaker     | Azure ML   | Vertex AI  |
+---------------+---------------+------------+------------+
| NAS           | EFS or FSx    | Azure File | Filestore  |
+---------------+---------------+------------+------------+

## Command Line {#cheat-cli}

### General Command Line

| Symbol          | What it is                        |
|-----------------|-----------------------------------|
| `man <command>` | Open manual for `command`         |
| `q`             | Quit the current screen           |
| `\`             | Continue bash command on new line |
| `ctrl + c`      | Quit current execution            |
| `echo <string>` | Print string (useful for piping)  |

### Linux Navigation

+----------------+-----------------------+-----------------------+
| Command        | What it does/is       | Notes + Helpful       |
|                |                       | options               |
+================+=======================+=======================+
| `/`            | System root or file   |                       |
|                | path separator        |                       |
+----------------+-----------------------+-----------------------+
| `.`            | current working       |                       |
|                | directory             |                       |
+----------------+-----------------------+-----------------------+
| `..`           | Parent of working     |                       |
|                | directory             |                       |
+----------------+-----------------------+-----------------------+
| `~`            | Home directory of the |                       |
|                | current user          |                       |
+----------------+-----------------------+-----------------------+
| `ls <dir>`     | List objects in a     | `-l` - format as list |
|                | directory             |                       |
|                |                       | `-a` - all (include   |
|                |                       | hidden files that     |
|                |                       | start with `.`)       |
+----------------+-----------------------+-----------------------+
| `pwd`          | Print working         |                       |
|                | directory             |                       |
+----------------+-----------------------+-----------------------+
| `cd <dir>`     | Change directory      | Can use relative or   |
|                |                       | absolute paths        |
+----------------+-----------------------+-----------------------+

### Reading Text Files

+-----------------+-----------------+--------------------------+
| **Command**     | **What it       | **Notes + Helpful        |
|                 | does**          | options**                |
+-----------------+-----------------+--------------------------+
| `cat <file>`    | Print a file    |                          |
|                 | from the top.   |                          |
+-----------------+-----------------+--------------------------+
| `less <file>`   | Print a file,   | Can be very helpful to   |
|                 | but just a      | look at a few rows of    |
|                 | little.         | csv.                     |
|                 |                 |                          |
|                 |                 | Lazily reads lines, so   |
|                 |                 | can be *much* faster     |
|                 |                 | than `cat` for big       |
|                 |                 | files.                   |
+-----------------+-----------------+--------------------------+
| `head <file>`   | Look at the     | Defaults to 10 lines,    |
|                 | beginning of a  | can specify a different  |
|                 | file.           | number with `-n <n>`.    |
+-----------------+-----------------+--------------------------+
| `tail <file>`   | Look at the end | Useful for logs where    |
|                 | of a file.      | the newest part is last. |
|                 |                 |                          |
|                 |                 | The `-f` flag is useful  |
|                 |                 | to follow for a live     |
|                 |                 | view.                    |
+-----------------+-----------------+--------------------------+
| `gre            | Search a file   | Writing regex can be a   |
| p <expression>` | using regex.    | pain. I suggest testing  |
|                 |                 | on                       |
|                 |                 | $\text{regex101.com}$.   |
|                 |                 |                          |
|                 |                 | Often useful in          |
|                 |                 | combination with the     |
|                 |                 | pipe.                    |
+-----------------+-----------------+--------------------------+
| `|`             | The pipe        |                          |
+-----------------+-----------------+--------------------------+
| `wc <file>`     | Count words in  | Use `-l` to count lines, |
|                 | a file          | useful for `.csv` files. |
+-----------------+-----------------+--------------------------+

### Manipulating Files

+----------------+-----------------+-------------------------+
| **Command**    | **What it       | **Notes + Helpful       |
|                | does**          | Options**               |
+----------------+-----------------+-------------------------+
| `rm <path>`    | Remove          | `-r` - recursively      |
|                |                 | remove everything below |
|                |                 | a file path             |
|                |                 |                         |
|                |                 | `-f` - force - don't    |
|                |                 | ask for each file       |
|                |                 |                         |
|                |                 | **Be very careful, it's |
|                |                 | permanent**             |
+----------------+-----------------+-------------------------+
|                |                 |                         |
+----------------+-----------------+-------------------------+
| `c             | Copy            |                         |
| p <from> <to>` |                 |                         |
+----------------+-----------------+-------------------------+
| `m             | Move            |                         |
| v <from> <to>` |                 |                         |
+----------------+-----------------+-------------------------+
| `*`            | Wildcard        |                         |
+----------------+-----------------+-------------------------+
| `              | Make/remove     | `-p` - create any parts |
| mkdir`/`rmdir` | directory       | of path that don't      |
|                |                 | exist                   |
+----------------+-----------------+-------------------------+

### Move things to/from server

+---------------+-----------------+-------------------------+
| **Command**   | **What it       | **Notes + Helpful       |
|               | does**          | Options**               |
+---------------+-----------------+-------------------------+
| `tar`         | Create/extract  | Almost always used with |
|               | archive file    | flags.                  |
|               |                 |                         |
|               |                 | Create is usually       |
|               |                 | `tar -czf <a            |
|               |                 | rchive name> <file(s)>` |
|               |                 |                         |
|               |                 | Extract is usually      |
|               |                 | `t                      |
|               |                 | ar -xfv <archive name>` |
+---------------+-----------------+-------------------------+
| `scp`         | Secure copy via | Run on laptop to server |
|               | `ssh`           |                         |
|               |                 | Can use most `ssh`      |
|               |                 | flags (like `-i` and    |
|               |                 | `-v`)                   |
+---------------+-----------------+-------------------------+

### Write files from the command line

+----------------+-------------------+------------------------------+
| Command        | What it does      | Notes                        |
+================+===================+==============================+
| `touch`        | Creates file if   | Updates last updated to      |
|                | doesn't already   | current time if it does      |
|                | exist.            | exist.                       |
+----------------+-------------------+------------------------------+
| `>`            | Overwrite file    | Creates a new file if it     |
|                | contents          | doesn't exist                |
+----------------+-------------------+------------------------------+
| `>>`           | Concatenate to    | Creates a new file if it     |
|                | end of file       | doesn't exist                |
+----------------+-------------------+------------------------------+

### Command Line Text Editors (Vim + Nano)

+----------------+-------------------------+------------------------+
| Command        | What it does            | Notes + Helpful        |
|                |                         | options                |
+================+=========================+========================+
| `^`            | Prefix for file command | Its the `⌘` or `Ctrl`  |
|                | in `nano` editor.       | key, not the caret     |
|                |                         | symbol.                |
+----------------+-------------------------+------------------------+
| `i`            | Enter insert mode (able |                        |
|                | to type) in `vim`       |                        |
+----------------+-------------------------+------------------------+
| `escape`       | Enter normal mode       |                        |
|                | (navigation) in `vim`.  |                        |
+----------------+-------------------------+------------------------+
| `:w`           | Write the current file  | Can be combined to     |
|                | in `vim` (from normal   | save and quit in one,  |
|                | mode)                   | `:wq`                  |
+----------------+-------------------------+------------------------+
| `:q`           | Quit `vim` (from normal | `:q!` quit without     |
|                | mode)                   | saving                 |
+----------------+-------------------------+------------------------+

## Cheatsheet: `ssh` {#cheat-ssh}

``` bash
ssh <user>@<host>
```

+-----------------+---------------------+------------------------------+
| Flag            | What it does        | Notes                        |
+=================+=====================+==============================+
| `-v`            | Verbose, good for   | Add more `v`s as you please, |
|                 | debugging.          | `-vv` or `-vvv`.             |
+-----------------+---------------------+------------------------------+
| `-i`            | Choose identity     | Not necessary with default   |
|                 | file (private key)  | key names.                   |
+-----------------+---------------------+------------------------------+

## Cheatsheet: Linux Admin Commands

### Users

+---------------+-----------------------------+------------------+
| **Command**   | **What it does**            | **Helpful        |
|               |                             | options +        |
|               |                             | notes**          |
+---------------+-----------------------------+------------------+
| `s            | Change to be a different    |                  |
| u <username>` | user.                       |                  |
+---------------+-----------------------------+------------------+
| `whoami`      | Get username of current     |                  |
|               | user.                       |                  |
+---------------+-----------------------------+------------------+
| `id`          | Get full user + group info  |                  |
|               | on current user.            |                  |
+---------------+-----------------------------+------------------+
| `passwd`      | Change password.            |                  |
+---------------+-----------------------------+------------------+
| `useradd`     | Add a new user.             |                  |
+---------------+-----------------------------+------------------+
| `usermo       | Modify user `username`      | `-aG <group>`    |
| d <username>` |                             | adds to a group  |
|               |                             | (e.g. `sudo`)    |
+---------------+-----------------------------+------------------+

### Permissions

+------------------------+--------------------+------------------------+
| Command                | What it does       | Helpful options +      |
|                        |                    | notes                  |
+========================+====================+========================+
| `chmod                 | Modifies           | Number indicates       |
|  <permissions> <file>` | permissions on a   | permissions for user,  |
|                        | file or directory. | group, others: add `4` |
|                        |                    | for read, `2` for      |
|                        |                    | write, `1` for         |
|                        |                    | execute, `0` for       |
|                        |                    | nothing, e.g. `644`.   |
+------------------------+--------------------+------------------------+
| `chow                  | Change the owner   | Can be used for user   |
| n <user/group> <file>` | of a file or       | or group, e.g.         |
|                        | directory.         | `:my-group`.           |
+------------------------+--------------------+------------------------+
| `sudo <command>`       | Adopt root         |                        |
|                        | permissions for    |                        |
|                        | the following      |                        |
|                        | command.           |                        |
+------------------------+--------------------+------------------------+

### Install applications (Ubuntu)

+------------------------------+-------------------------+
| **Command**                  | **What it does**        |
+------------------------------+-------------------------+
| `apt-get u                   | Fetch and install       |
| pdate && apt-get upgrade -y` | upgrades to system      |
|                              | packages                |
+------------------------------+-------------------------+
| `apt-get install <package>`  | Install a system        |
|                              | package.                |
+------------------------------+-------------------------+
| `wget`                       | Download a file from a  |
|                              | URL.                    |
+------------------------------+-------------------------+
| `gdebi`                      | Install local `.deb`    |
|                              | file.                   |
+------------------------------+-------------------------+

### Storage

+----------------+----------------------+----------------------+
| Command        | What it does         | Helpful options      |
+================+======================+======================+
| `df`           | Check storage space  | `-h` for human       |
|                | on device.           | readable file sizes. |
+----------------+----------------------+----------------------+
| `du`           | Check size of files. | Most likely to be    |
|                |                      | used as              |
|                |                      | `d u                 |
|                |                      | - h <dir> | sort -h` |
|                |                      |                      |
|                |                      | Also useful to       |
|                |                      | combine with `head`. |
+----------------+----------------------+----------------------+

### Processes

+----------------+-----------------+--------------------------------+
| Command        | What it does    | Helpful options                |
+================+=================+================================+
| `top`          | See what's      |                                |
|                | running on the  |                                |
|                | system.         |                                |
+----------------+-----------------+--------------------------------+
| `ps aux`       | See all system  | Consider using `--sort` and    |
|                | processes.      | pipe into `head` or `grep`     |
+----------------+-----------------+--------------------------------+
| `kill`         | Kill a system   | `-9` to force kill immediately |
|                | process.        |                                |
+----------------+-----------------+--------------------------------+

### Networking

+-------------------+--------------+------------------------------+
| **Command**       | **What it    | **Helpful Options**          |
|                   | does**       |                              |
+-------------------+--------------+------------------------------+
| `netstat`         | See ports    | Usually used with `-tlp`,    |
|                   | and services | for tcp listening            |
|                   | using them.  | applications, including      |
|                   |              | `pid`                        |
+-------------------+--------------+------------------------------+
| `ssh -L <port>:<i | Port         | Remote `ip` is usually       |
| p>:<port>:<host>` | forwards a   | `localhost`.                 |
|                   | remote port  |                              |
|                   | on remote    | Choose local port to match   |
|                   | host to      | remote port.                 |
|                   | local.       |                              |
+-------------------+--------------+------------------------------+

### The path

+-----------------------------+------------------------------+
| **Command**                 | **What it does**             |
+-----------------------------+------------------------------+
| `which <command>`           | Finds the location of the    |
|                             | binary that runs when you    |
|                             | run `command`.               |
+-----------------------------+------------------------------+
| `ln -s <location to l       | Creates a symlink from file  |
| ink>:<location of symlink>` | at `location to link` to     |
|                             | `location of symlink`.       |
+-----------------------------+------------------------------+

### `systemd`

Daemonizing services is accomplished by configuring them in
`/etc/systemd/system/<service name>.service`.

The format of all commands is `systemctl <command> <application>`.

+------------------------------------------+--------------------------+
| Command                                  | Notes/Tips               |
+==========================================+==========================+
| `status`                                 | Report status            |
+------------------------------------------+--------------------------+
| `start`                                  |                          |
+------------------------------------------+--------------------------+
| `stop`                                   |                          |
+------------------------------------------+--------------------------+
| `restart`                                | `stop` then `start`      |
+------------------------------------------+--------------------------+
| `reload`                                 | Reload configuration     |
|                                          | that doesn't require     |
|                                          | restart (depends on      |
|                                          | service)                 |
+------------------------------------------+--------------------------+
| `enable`                                 | Daemonize the service    |
+------------------------------------------+--------------------------+
| `disable`                                | Un-daemonize the service |
+------------------------------------------+--------------------------+

## IP Addresses and Ports {#cheat-ports}

### Special IP Addresses

+------------------------+--------------------------------------------+
| Address                | Meaning                                    |
+========================+============================================+
| $\text{127.0.0.1}$     | $\text{localhost}$ or loopback -- the      |
|                        | machine that originated the request.       |
+------------------------+--------------------------------------------+
| $\text{192.168.x.x}$   | Protected address blocks used for private  |
|                        | IP addresses.                              |
| $\text{172.16.x.x.x}$  |                                            |
|                        |                                            |
| $\text{10.x.x.x}$      |                                            |
+------------------------+--------------------------------------------+

### Special Ports

All ports below $1024$ are reserved for server tasks and cannot be
assigned to admin-controlled services.

| Protocol/Application | Default Port |
|----------------------|--------------|
| HTTP                 | $80$         |
| HTTPS                | $443$        |
| SSH                  | $22$         |
| PostgreSQL           | $5432$       |
| RStudio Server       | $8787$       |
| Shiny Server         | $3939$       |
| JupyterHub           | $8000$       |
