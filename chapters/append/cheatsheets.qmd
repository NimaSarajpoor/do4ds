# Cheatsheets {#sec-append-cheat}

## Environments as code

### Checking library + repository status

| Step                                            | R Command         | Python Command |
|------------------------------------|------------------|------------------|
| Check whether library is in sync with lockfile. | `re nv::status()` | None           |

### Creating and using a standalone project library

Make sure you're in a standalone project library.

<table style="width:96%;">
<colgroup>
<col style="width: 47%" />
<col style="width: 23%" />
<col style="width: 23%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p><strong>Step</strong></p></td>
<td><p>R Command</p></td>
<td><p>Python Command</p></td>
</tr>
<tr class="even">
<td><p>Create a standalone library.</p></td>
<td><p><code>renv::init()</code></p>
<p>Tip: get <code>{renv}</code> w/
<code>install.p ackages("renv")</code></p></td>
<td><p><code>p ython -m venv &lt;dir&gt;</code></p>
<p>Convention: use<code>.venv</code> for <code>&lt;dir&gt;</code></p>
<p>Tip: <code>{venv}</code> included w/ Python 3.5+</p></td>
</tr>
<tr class="odd">
<td><p>Activate project library.</p></td>
<td><p><code>r env::activate()</code></p>
<p>Happens automatically if in RStudio project.</p></td>
<td><p><code>source &lt;dir&gt; /bin/activate</code></p></td>
</tr>
<tr class="even">
<td><p>Install packages as normal.</p></td>
<td><p><code>install.pa ckages("&lt;pkg&gt;")</code></p></td>
<td><p><code>python - m pip install &lt;pkg&gt;</code></p></td>
</tr>
<tr class="odd">
<td><p>Snapshot package state.</p></td>
<td><p><code>r env::snapshot()</code></p></td>
<td><p><code>pip freeze &gt; requirements.txt</code></p></td>
</tr>
<tr class="even">
<td><p>Exit project environment.</p></td>
<td><p>Leave R project or <code>re n v::deactivate()</code></p></td>
<td><p><code>deactivate</code></p></td>
</tr>
</tbody>
</table>

### Collaborating on someone else's project

Start by downloading the project into a directory on your machine.

<table style="width:89%;">
<colgroup>
<col style="width: 23%" />
<col style="width: 23%" />
<col style="width: 41%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p><strong>Step</strong></p></td>
<td><p><strong>R Command</strong></p></td>
<td><p><strong>Python Command</strong></p></td>
</tr>
<tr class="even">
<td><p>Move into project directory.</p></td>
<td><p><code>set wd ("&lt; p roject-dir&gt;")</code></p>
<p>Or open project in RStudio.</p></td>
<td><p><code>cd &lt;project-dir&gt;</code></p></td>
</tr>
<tr class="odd">
<td><p>Create project environment.</p></td>
<td><p><code>renv::init()</code></p></td>
<td><p><code>python -m venv &lt;dir&gt;</code></p>
<p>Recommend: use <code>.venv</code> for
<code>&lt;dir&gt;</code></p></td>
</tr>
<tr class="even">
<td><p>Enter project environment.</p></td>
<td><p>Happens automatically or <code>ren v::activate()</code></p></td>
<td><p><code>source &lt;dir&gt; /bin/activate</code></p></td>
</tr>
<tr class="odd">
<td><p>Restore packages.</p></td>
<td><p>Happens automatically or <code>re nv::restore()</code></p></td>
<td><p><code>pip install -r requirements.txt</code></p></td>
</tr>
</tbody>
</table>

## HTTP code cheatsheet {#cheat-http}

As you work with HTTP traffic, you'll learn some of the common codes.
Here's are some of those used most frequently.

| Code         | Meaning                                                                                                                                                    |
|----------------------|--------------------------------------------------|
| $200$        | Everyone's favorite, a successful response.                                                                                                                |
| $\text{3xx}$ | Your query was redirected somewhere else, usually ok.                                                                                                      |
| $\text{4xx}$ | Errors with the request                                                                                                                                    |
| $400$        | Bad request. This isn't a request the server can understand.                                                                                               |
| $401$/$403$  | Unauthorized or forbidden. Required authentication hasn't been provided.                                                                                   |
| $404$        | Not found. There isn't any content to access here.                                                                                                         |
| $\text{5xx}$ | Errors with the server once your request got there.                                                                                                        |
| $500$        | Generic server-side error. Your request was received, but there was an error processing it.                                                                |
| $504$        | Gateway timeout. This means that a proxy or gateway between you and the server you're trying to access timed out before it got a response from the server. |

## Git {#cheat-git}

|                                 |                                                        |
|---------------------------|---------------------------------------------|
| **Command**                     | **What it does**                                       |
| `git clone <remote>`            | Clone a remote repo -- make sure you're using SSH URL. |
| `git add <files/dir>`           | Add files/directory to staging area.                   |
| `git commit -m <message>`       | Commit staging area.                                   |
| `git push origin <branch>`      | Push to a remote.                                      |
| `git pull origin <branch>`      | Pull from a remote.                                    |
| `git checkout <branch name>`    | Checkout a branch.                                     |
| `git checkout -b <branch name>` | Create and checkout a branch.                          |
| `git branch -d <branch name>`   | Delete a branch.                                       |

## Docker {#cheat-docker}

### Docker CLI commands

<table style="width:93%;">
<colgroup>
<col style="width: 22%" />
<col style="width: 22%" />
<col style="width: 22%" />
<col style="width: 24%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p>Stage</p></td>
<td><p>Command</p></td>
<td><p><strong>What it does</strong></p></td>
<td><p><strong>Notes and helpful options</strong></p></td>
</tr>
<tr class="even">
<td><p>Build</p></td>
<td><p><code>docker build &lt;directory&gt;</code></p></td>
<td><p>Builds a directory into an image.</p></td>
<td><p><code>-t &lt;name:tag&gt;</code> provides a name to the
container.</p>
<p><code>tag</code> is optional, defaults to
<code>latest</code>.</p></td>
</tr>
<tr class="odd">
<td><p>Move</p></td>
<td><p><code>docker push &lt;image&gt;</code></p></td>
<td><p>Push a container to a registry.</p></td>
<td></td>
</tr>
<tr class="even">
<td><p>Move</p></td>
<td><p><code>docker pull &lt;image&gt;</code></p></td>
<td><p>Pull a container from a registry.</p></td>
<td><p>Rarely needed because <code>run</code> pulls the container if
needed.</p></td>
</tr>
<tr class="odd">
<td><p>Run</p></td>
<td><p><code>docker run &lt;image&gt;</code></p></td>
<td><p>Run a container.</p></td>
<td><p>See flags in next table.</p></td>
</tr>
<tr class="even">
<td><p>Run</p></td>
<td><p><code>docker stop &lt;container&gt;</code></p></td>
<td><p>Stop a running container.</p></td>
<td><p><code>docker kill</code> can be used if <code>stop</code>
fails.</p></td>
</tr>
<tr class="odd">
<td><p>Run</p></td>
<td><p><code>docker ps</code></p></td>
<td><p>List running containers.</p></td>
<td><p>Useful to get container <code>id</code> to do things to
it.</p></td>
</tr>
<tr class="even">
<td><p>Run</p></td>
<td><p><code>docker exec &lt;cont aine r&gt; &lt;command&gt;</code></p></td>
<td><p>Run a command inside a running container.</p></td>
<td><p>Basically always used to open a shell with
<code>d ocker exec -it &lt;co ntainer&gt; /bin/bash</code></p></td>
</tr>
<tr class="odd">
<td><p>Run</p></td>
<td><p><code>docker logs &lt;container&gt;</code></p></td>
<td><p>Views logs for a container.</p></td>
<td></td>
</tr>
</tbody>
</table>

### Flags for `docker run`

|                    |                                                        |                                                                          |
|-----------------------|-----------------------|---------------------------|
| Flag               | Effect                                                 | Notes                                                                    |
| `--name <name>`    | Give a name to container.                              | Optional. Auto-assigned if not provided                                  |
| `--rm`             | Remove container when its stopped.                     | Don't use in production. You probably want to inspect failed containers. |
| `-d`               | Detach container (don't block the terminal).           | Almost always used in production.                                        |
| `-p <port>:<port>` | Publish port from inside running container to outside. | Needed if you want to access an app or API inside the container.         |
| `-v <dir>:<dir>`   | Mount volume into the container.                       |                                                                          |

*Reminder: Order for `-p` and `-v` is `<host>:<container>`*

### Dockerfile commands

These are the commands that go in a Dockerfile when you're building it.

|         |                                                       |                           |
|-------------------|-------------------------|-----------------------------|
| Command | Purpose                                               | Example                   |
| `FROM`  | Indicate base container.                              | `FROM rocker/r-ver:4.1.0` |
| `RUN`   | Run a command when building.                          | `RUN apt-get update`      |
| `COPY`  | Copy from build directory into the container.         | `COPY . /app/`            |
| `CMD`   | Specify the command to run when the container starts. | `CMD quarto render .`     |

## Cloud services

|                                |                          |                      |                        |
|------------------|------------------|------------------|------------------|
| **Service**                    | **AWS**                  | **Azure**            | **GCP**                |
| Kubernetes cluster             | EKS or Fargate           | AKS                  | GKE                    |
| Run a container or application | ECS or Elastic Beanstalk | Azure Container Apps | Google App Engine      |
| Run an API                     | Lambda                   | Azure Functions      | Google Cloud Functions |
| Database                       | RDS                      | Azure SQL            | Google Cloud Database  |
| Data Warehouse                 | Redshift                 | DataLake             | BigQuery               |
| ML Platform                    | SageMaker                | Azure ML             | Vertex AI              |
| NAS                            | EFS or FSx               | Azure File           | Filestore              |

## Command line {#cheat-cli}

### General command line

| Symbol          | What it is                         |
|-----------------|------------------------------------|
| `man <command>` | Open manual for `command`.         |
| `q`             | Quit the current screen.           |
| `\`             | Continue bash command on new line. |
| `ctrl + c`      | Quit current execution.            |
| `echo <string>` | Print string (useful for piping).  |

### Linux filesystem navigation

<table style="width:86%;">
<colgroup>
<col style="width: 24%" />
<col style="width: 30%" />
<col style="width: 30%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Command</p></th>
<th><p>What it does/is</p></th>
<th><p>Notes + Helpful options</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p><code>/</code></p></td>
<td><p>System root or file path separator.</p></td>
<td></td>
</tr>
<tr class="even">
<td><p><code>.</code></p></td>
<td><p>Current working directory.</p></td>
<td></td>
</tr>
<tr class="odd">
<td><p><code>..</code></p></td>
<td><p>Parent of working directory.</p></td>
<td></td>
</tr>
<tr class="even">
<td><p><code>~</code></p></td>
<td><p>Home directory of the current user.</p></td>
<td></td>
</tr>
<tr class="odd">
<td><p><code>ls &lt;dir&gt;</code></p></td>
<td><p>List objects in a directory.</p></td>
<td><p><code>-l</code> - format as list</p>
<p><code>-a</code> - all (include hidden files that start with
<code>.</code>)</p></td>
</tr>
<tr class="even">
<td><p><code>pwd</code></p></td>
<td><p>Print working directory.</p></td>
<td></td>
</tr>
<tr class="odd">
<td><p><code>cd &lt;dir&gt;</code></p></td>
<td><p>Change directory.</p></td>
<td><p>Can use relative or absolute paths.</p></td>
</tr>
</tbody>
</table>

### Reading text files

<table style="width:81%;">
<colgroup>
<col style="width: 23%" />
<col style="width: 23%" />
<col style="width: 33%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p><strong>Command</strong></p></td>
<td><p><strong>What it does</strong></p></td>
<td><p><strong>Notes + Helpful options</strong></p></td>
</tr>
<tr class="even">
<td><p><code>cat &lt;file&gt;</code></p></td>
<td><p>Print a file from the top.</p></td>
<td></td>
</tr>
<tr class="odd">
<td><p><code>less &lt;file&gt;</code></p></td>
<td><p>Print a file, but just a little.</p></td>
<td><p>Can be very helpful to look at a few rows of csv.</p>
<p>Lazily reads lines, so can be <em>much</em> faster than
<code>cat</code> for big files.</p></td>
</tr>
<tr class="even">
<td><p><code>head &lt;file&gt;</code></p></td>
<td><p>Look at the beginning of a file.</p></td>
<td><p>Defaults to 10 lines, can specify a different number with
<code>-n &lt;n&gt;</code>.</p></td>
</tr>
<tr class="odd">
<td><p><code>tail &lt;file&gt;</code></p></td>
<td><p>Look at the end of a file.</p></td>
<td><p>Useful for logs where the newest part is last.</p>
<p>The <code>-f</code> flag is useful to follow for a live
view.</p></td>
</tr>
<tr class="even">
<td><p><code>grep &lt;expression&gt;</code></p></td>
<td><p>Search a file using regex.</p></td>
<td><p>Writing regex can be a pain. I suggest testing on .</p>
<p>Often useful in combination with the pipe.</p></td>
</tr>
<tr class="odd">
<td><p><code>|</code></p></td>
<td><p>The pipe.</p></td>
<td></td>
</tr>
<tr class="even">
<td><p><code>wc &lt;file&gt;</code></p></td>
<td><p>Count words in a file.</p></td>
<td><p>Use <code>-l</code> to count lines, useful for <code>.csv</code>
files.</p></td>
</tr>
</tbody>
</table>

### Manipulating files

<table style="width:79%;">
<colgroup>
<col style="width: 23%" />
<col style="width: 23%" />
<col style="width: 31%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p><strong>Command</strong></p></td>
<td><p><strong>What it does</strong></p></td>
<td><p><strong>Notes + Helpful Options</strong></p></td>
</tr>
<tr class="even">
<td><p><code>rm &lt;path&gt;</code></p></td>
<td><p>Remove.</p></td>
<td><p><code>-r</code> - recursively remove everything below a file
path</p>
<p><code>-f</code> - force - dont ask for each file</p>
<p><strong>Be very careful, its permanent!</strong></p></td>
</tr>
<tr class="odd">
<td><p><code>cp &lt;from&gt; &lt;to&gt;</code></p></td>
<td><p>Copy.</p></td>
<td></td>
</tr>
<tr class="even">
<td><p><code>mv &lt;from&gt; &lt;to&gt;</code></p></td>
<td><p>Move.</p></td>
<td></td>
</tr>
<tr class="odd">
<td><p><code>*</code></p></td>
<td><p>Wildcard.</p></td>
<td></td>
</tr>
<tr class="even">
<td><p><code>mkdir</code>/<code>rmdir</code></p></td>
<td><p>Make/remove directory.</p></td>
<td><p><code>-p</code> - create any parts of path that dont
exist</p></td>
</tr>
</tbody>
</table>

### Move things to/from server

<table style="width:79%;">
<colgroup>
<col style="width: 23%" />
<col style="width: 23%" />
<col style="width: 31%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p><strong>Command</strong></p></td>
<td><p><strong>What it does</strong></p></td>
<td><p><strong>Notes + Helpful Options</strong></p></td>
</tr>
<tr class="even">
<td><p><code>tar</code></p></td>
<td><p>Create/extract archive file.</p></td>
<td><p>Almost always used with flags.</p>
<p>Create is usually
<code>tar -czf &lt;archive name&gt; &lt;file(s)&gt;</code></p>
<p>Extract is usually
<code>tar -xfv &lt;archive name&gt;</code></p></td>
</tr>
<tr class="odd">
<td><p><code>scp</code></p></td>
<td><p>Secure copy via <code>ssh</code>.</p></td>
<td><p>Run on laptop to server.</p>
<p>Can use most <code>ssh</code> flags (like <code>-i</code> and
<code>-v</code>).</p></td>
</tr>
</tbody>
</table>

### Write files from the command line

| Command | What it does                           | Notes                                                  |
|--------------------|---------------------|-------------------------------|
| `touch` | Creates file if doesn't already exist. | Updates last updated to current time if it does exist. |
| `>`     | Overwrite file contents.               | Creates a new file if it doesn't exist.                |
| `>>`    | Concatenate to end of file.            | Creates a new file if it doesn't exist.                |

### Command line text editors (Vim + Nano)

| Command  | What it does                                        | Notes + Helpful options                           |
|--------------------|---------------------------|--------------------------|
| `^`      | Prefix for file command in `nano` editor.           | It's the `⌘` or `Ctrl` key, not the caret symbol. |
| `i`      | Enter insert mode (able to type) in `vim`.          |                                                   |
| `escape` | Enter normal mode (navigation) in `vim`.            |                                                   |
| `:w`     | Write the current file in `vim` (from normal mode). | Can be combined to save and quit in one, `:wq`.   |
| `:q`     | Quit `vim` (from normal mode).                      | `:q!` quit without saving.                        |

## SSH {#cheat-ssh}

General usage:

``` bash
ssh <user>@<host>
```

| Flag | What it does                        | Notes                                         |
|-------------------|----------------------|------------------------------|
| `-v` | Verbose, good for debugging.        | Add more `v`s as you please, `-vv` or `-vvv`. |
| `-i` | Choose identity file (private key). | Not necessary with default key names.         |

## Linux admin

### Users

|                        |                                             |                                             |
|--------------------|--------------------------------|--------------------|
| **Command**            | **What it does**                            | **Helpful options + notes**                 |
| `su <username>`        | Change to be a different user.              |                                             |
| `whoami`               | Get username of current user.               |                                             |
| `id`                   | Get full user + group info on current user. |                                             |
| `passwd`               | Change password.                            |                                             |
| `useradd`              | Add a new user.                             |                                             |
| `usermo  d <username>` | Modify user `username`.                     | `-aG <group>` adds to a group (e.g.,`sudo`) |

### Permissions

| Command                      | What it does                                      | Helpful options + notes                                                                                                              |
|-------------------------|---------------------|-------------------------|
| `chmod <permissions> <file>` | Modifies permissions on a file or directory.      | Number indicates permissions for user, group, others: add `4` for read, `2` for write, `1` for execute, `0` for nothing, e.g.,`644`. |
| `chown <user/group> <file>`  | Change the owner of a file or directory.          | Can be used for user or group, e.g.,`:my-group`.                                                                                     |
| `sudo <command>`             | Adopt root permissions for the following command. |                                                                                                                                      |

### Install applications (Ubuntu)

|                                        |                                               |
|---------------------------------------|---------------------------------|
| **Command**                            | **What it does**                              |
| `apt-get update && apt-get upgrade -y` | Fetch and install upgrades to system packages |
| `apt-get install <package>`            | Install a system package.                     |
| `wget`                                 | Download a file from a URL.                   |
| `gdebi`                                | Install local `.deb` file.                    |

### Storage

<table style="width:82%;">
<colgroup>
<col style="width: 24%" />
<col style="width: 28%" />
<col style="width: 28%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Command</p></th>
<th><p>What it does</p></th>
<th><p>Helpful options</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p><code>df</code></p></td>
<td><p>Check storage space on device.</p></td>
<td><p><code>-h</code> for human readable file sizes.</p></td>
</tr>
<tr class="even">
<td><p><code>du</code></p></td>
<td><p>Check size of files.</p></td>
<td><p>Most likely to be used as
<code>du -h &lt;dir&gt; | sort -h</code></p>
<p>Also useful to combine with <code>head</code>.</p></td>
</tr>
</tbody>
</table>

### Processes

| Command  | What it does                      | Helpful options                                         |
|--------------------|--------------------|---------------------------------|
| `top`    | See what's running on the system. |                                                         |
| `ps aux` | See all system processes.         | Consider using `--sort` and pipe into `head` or `grep`. |
| `kill`   | Kill a system process.            | `-9` to force kill immediately                          |

### Networking

<table style="width:85%;">
<colgroup>
<col style="width: 23%" />
<col style="width: 23%" />
<col style="width: 37%" />
</colgroup>
<tbody>
<tr class="odd">
<td><p><strong>Command</strong></p></td>
<td><p><strong>What it does</strong></p></td>
<td><p><strong>Helpful Options</strong></p></td>
</tr>
<tr class="even">
<td><p><code>netstat</code></p></td>
<td><p>See ports and services using them.</p></td>
<td><p>Usually used with <code>-tlp</code>, for tcp listening
applications, including <code>pid</code>.</p></td>
</tr>
<tr class="odd">
<td><p><code>ssh -L &lt;port&gt;:&lt;i p&gt;:&lt;port&gt;:&lt;host&gt;</code></p></td>
<td><p>Port forwards a remote port on remote host to local.</p></td>
<td><p>Remote <code>ip</code> is usually <code>localhost</code>.</p>
<p>Choose local port to match remote port.</p></td>
</tr>
</tbody>
</table>

### The path

|                                                  |                                                                                       |
|-----------------------------------|------------------------------------|
| **Command**                                      | **What it does**                                                                      |
| `which <command>`                                | Finds the location of the binary that runs when you run `command`.                    |
| `ln -s <linked location>:<where to put symlink>` | Creates a symlink from file/directory at `linked location` to `where to put symlink`. |

### `systemd`

Daemonizing services is accomplished by configuring them in
`/etc/systemd/system/<service name>.service`.

The format of all commands is `systemctl <command> <application>`.

| Command   | Notes/Tips                                                              |
|-------------------|----------------------------|
| `status`  | Report status.                                                          |
| `start`   |                                                                         |
| `stop`    |                                                                         |
| `restart` | `stop` then `start`.                                                    |
| `reload`  | Reload configuration that doesn't require restart (depends on service). |
| `enable`  | Daemonize the service.                                                  |
| `disable` | Un-daemonize the service.                                               |

## IP Addresses and ports {#cheat-ports}

### Special IP Addresses

<table style="width:94%;">
<colgroup>
<col style="width: 32%" />
<col style="width: 60%" />
</colgroup>
<thead>
<tr class="header">
<th><p>Address</p></th>
<th><p>Meaning</p></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><p></p></td>
<td><p> or loopback – the machine that originated the request.</p></td>
</tr>
<tr class="even">
<td><p></p>
<p></p>
<p></p></td>
<td><p>Protected address blocks used for private IP addresses.</p></td>
</tr>
</tbody>
</table>

### Special ports

All ports below $1024$ are reserved for server tasks and cannot be
assigned to admin-controlled services.

| Protocol/application | Default port |
|----------------------|--------------|
| HTTP                 | $80$         |
| HTTPS                | $443$        |
| SSH                  | $22$         |
| PostgreSQL           | $5432$       |
| RStudio Server       | $8787$       |
| Shiny Server         | $3939$       |
| JupyterHub           | $8000$       |
