# The Command Line + SSH {#command-line}

-   Most SysAdmin work is done on the command line
-   Unlike your laptop, servers don't often have a desktop interface
-   The interactive sections of this book will require you to use the command line

-\> How to get to command line on different systems

-\> Set up docker desktop

#TODO: Address using `vi`

# Accessing Servers via SSH {#ssh}

Learning Objectives:

-   Understanding of what SSH is
-   Understanding of how to use SSH to access a server

------------------------------------------------------------------------

## What is SSH?

-   Stands for secure (socket) shell
-   Way to remotely access a different (virtual) machine
-   Workhorse of doing work on another server

## How does SSH work?

-   Via Public Key Encryption
    -   Public/Private Key
    -   Known Hosts \[Diagram: SSH Keys\] \> Sidebar on public key encryption
-   By default, available on port 22

## Basic SSH Use

-   The terminal
-   3 step process
    1.  generate public/private keys `ssh-keygen`
    2.  place keys in appropriate place
    3.  use ssh to do work
-   Permissions on key

## Getting Comfortable in your own setup

-   Using ssh-config

## Advanced SSH Tips + Tricks

-   SSH Tunneling/Port Forwarding
-   -vvvv, -i, -p \[Diagram: Port Forwarding\]

## Exercises

1.  Draw your own diagram of the sequence of things that occur when you execute `ssh user@server.company.com` in the terminal.
2.  Stand up a new server on one of the major cloud providers. Try logging in using the provided key file. Create a new user on the server.
3.  Generate a new SSH key locally and copy the correct key onto the server (think for a moment about which key is the correct one -- consult your diagram from step 1 if necessary).
4.  Set up an SSH alias so you can SSH into your server using just `ssh testserver` (hint: look at your SSH config).
5.  Create a local text file and SFTP it to the server. SSH in, edit the file, and SFTP it back.
6.  \[Advanced\] Stand up a nginx server on your remote instance. Don't open the port to the world, but SSH port forward the server page to your local browser.
